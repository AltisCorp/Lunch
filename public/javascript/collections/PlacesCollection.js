// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['collections/Collection', 'models/Place', 'moment'], function(Collection, Place, moment) {
    var PlacesCollection;
    return PlacesCollection = (function(_super) {

      __extends(PlacesCollection, _super);

      PlacesCollection.name = 'PlacesCollection';

      function PlacesCollection() {
        return PlacesCollection.__super__.constructor.apply(this, arguments);
      }

      PlacesCollection.prototype.model = Place;

      PlacesCollection.prototype.url = '/places';

      PlacesCollection.prototype.comparator = function(compare) {
        return Math.random();
      };

      PlacesCollection.prototype.select = function() {
        var i, key, place, selectionPool, today, votes, _i, _ref;
        today = moment().sod().valueOf();
        selectionPool = [];
        _ref = this.models;
        for (key in _ref) {
          place = _ref[key];
          votes = place.get(place.votesKey);
          for (i = _i = 0; 0 <= votes ? _i <= votes : _i >= votes; i = 0 <= votes ? ++_i : --_i) {
            selectionPool.push(place.id);
          }
        }
        return this.get(selectionPool[Math.floor(Math.random() * selectionPool.length)]);
      };

      return PlacesCollection;

    })(Collection);
  });

}).call(this);
