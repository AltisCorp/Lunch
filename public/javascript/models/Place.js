// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  define(['models/Model', 'jquery', 'use!underscore', 'moment'], function(Model, $, _, moment) {
    var Place;
    return Place = (function(_super) {

      __extends(Place, _super);

      Place.name = 'Place';

      function Place() {
        return Place.__super__.constructor.apply(this, arguments);
      }

      Place.prototype.vetoesKey = 'vetoesToday';

      Place.prototype.initialize = function() {
        if (this.has('vetoes')) {
          this.setTodaysVetoes();
        }
        return this.on('change:vetoes', this.setTodaysVetoes, this);
      };

      Place.prototype.veto = function() {
        var _this = this;
        return $.ajax({
          url: '/places/veto/' + this.get('id'),
          success: function() {
            return _this.set(_this.vetoesKey, _this.get(_this.vetoesKey) + 1);
          }
        });
      };

      Place.prototype.setTodaysVetoes = function() {
        var today, todaysVetoes;
        today = moment().sod().valueOf();
        todaysVetoes = _.reduce(this.get('vetoes'), function(memo, veto) {
          if (moment(veto.created).valueOf() > today) {
            return memo + 1;
          } else {
            return memo;
          }
        }, 0);
        return this.set(this.vetoesKey, todaysVetoes || (todaysVetoes = 0));
      };

      return Place;

    })(Model);
  });

}).call(this);
